name: Full CI (Dep-Check + Build + Test)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Job 1: Security scan for known vulnerabilities in dependencies
  owasp-dep-check:
    name: OWASP Dependency-Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          # Use the correct project name
          project: "ssd-lab7"
          scan: "."
          format: "HTML"
          out: "reports"
          # This setting prevents the job from failing on any found vulnerability
          failOnCVSS: 0
          # IMPORTANT: You must add this secret to your GitHub repository settings
          nvdApiKey: "${{ secrets.NVD_API_KEY }}"
      
      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/dependency-check-report.html
    
  # Job 2: Build the application and prepare it for testing
  build:
    name: Build and Package
    # This job runs after the security scan is complete
    needs: owasp-dep-check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create build artifact
      run: tar -czf www-build.tar.gz src/ tests/ package.json package-lock.json

    - name: Upload artifact for test job
      uses: actions/upload-artifact@v4
      with:
        name: www-build
        path: www-build.tar.gz

  # Job 3: Run all tests (Unit and Selenium UI)
  test:
    name: Run Tests (Unit + Selenium)
    # This job runs after the build is complete
    needs: build
    runs-on: ubuntu-latest
    
    # We use the 'services' block to start Selenium, which is more reliable for this project
    services:
      selenium:
        image: seleniarm/standalone-chromium:latest
        # The healthcheck ensures the job waits until Selenium is fully ready
        options: >-
          --health-cmd "curl --fail http://localhost:4444/wd/hub/status || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: www-build

    - name: Extract artifact files
      run: tar -xzf www-build.tar.gz

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      # This command is defined in your package.json
      run: npm test

    - name: Start Node.js server and wait for it to be ready
      run: |
        # Start the server in the background
        node src/server.js &
        # Actively wait for the server to respond instead of using a fixed sleep
        while ! curl --silent --fail http://localhost:3000; do
          echo "Waiting for Node.js server..."
          sleep 2
        done
        echo "Node.js server is up!"

    - name: Run Selenium integration tests
      # Use the 'github' argument to tell the script to use CI URLs
      run: node tests/SeleniumTest.mjs github