name: Node.js Selenium CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Cache Node.js modules for faster builds
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: node_modules
          # Create a unique cache key based on package-lock.json
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          # Use a fallback key if the main key is not found
          restore-keys: ${{ runner.os }}-node-modules

      - name: Install Node.js dependencies
        run: npm ci # 'npm ci' is generally preferred for CI over 'npm install'

      - name: Prepare build artifact
        run: |
          # Ensure all necessary files are included and tar output is clear
          tar -czvf www-build.tar.gz ./package.json ./package-lock.json ./src/server.js ./tests/SeleniumTest.mjs ./tests/test.js
          echo "Artifact created: www-build.tar.gz"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: www-build
          path: www-build.tar.gz

  test:
    name: Run Unit & Selenium Tests
    needs: build # This job depends on the build job completing successfully
    runs-on: ubuntu-latest
    
    # Define services that will run alongside the main job container
    services:
      # Service for Selenium (using the ARM-compatible image)
      selenium:
        image: seleniarm/standalone-chromium:latest
        ports:
          - 4444:4444
        # Healthcheck to ensure Selenium is ready before tests run
        options: >-
          --health-cmd "curl --fail http://localhost:4444/wd/hub/status || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Service for your Node.js application
      appserver:
        image: node:20-alpine # Use a small Node.js image
        working-directory: ${{ github.workspace }} # Set context to the root of the repo
        ports:
          - 3000:3000 # Expose port 3000
        # This command starts your server. It should start in the background.
        # GitHub Actions handles backgrounding for services automatically.
        command: ["node", "src/server.js"]
        # Healthcheck to ensure your Node.js server is ready
        options: >-
          --health-cmd "curl --fail http://localhost:3000 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      # Environment variables for the test script to use
      # These now correctly point to the services
      TEST_BASE_URL: http://testserver:3000
      SELENIUM_HOST: http://selenium:4444/wd/hub

    steps:
      - name: Download built files
        uses: actions/download-artifact@v4
        with:
          name: www-build
          path: ${{ github.workspace }} # Download to the root directory

      - name: Extract artifacts
        run: |
          tar -xzvf www-build.tar.gz -C ${{ github.workspace }} # Extract to the root directory
          echo "Extracted files."

      - name: Install dependencies
        run: npm ci

      # Removed manual server start/wait as services handle it
      # Removed manual Selenium wait as service healthcheck handles it

      - name: Run unit tests
        run: npm test

      - name: Run Selenium integration tests
        # Ensure the script uses the correct environment URLs
        run: node tests/SeleniumTest.mjs github