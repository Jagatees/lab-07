name: Full CI (Dep-Check + Build + Test)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Job 1: Security scan for known vulnerabilities in dependencies
  owasp-dep-check:
    name: OWASP Dependency-Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "ssd-lab7"
          scan: "."
          format: "HTML"
          out: "reports"
          failOnCVSS: 0
          nvdApiKey: "${{ secrets.NVD_API_KEY }}"
      
      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/dependency-check-report.html
    
  # Job 2: Build the application and prepare it for testing
  build:
    name: Build and Package
    needs: owasp-dep-check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create build artifact
      run: tar -czf www-build.tar.gz src/ tests/ package.json package-lock.json

    - name: Upload artifact for test job
      uses: actions/upload-artifact@v4
      with:
        name: www-build
        path: www-build.tar.gz

  # Job 3: Run all tests (Unit and Selenium UI)
  test:
    name: Run Tests (Unit + Selenium)
    needs: build
    runs-on: ubuntu-latest
    
    # Define the services needed for this job
    services:
      selenium:
        image: seleniarm/standalone-chromium:latest
        ports:
          - 4444:4444
        options: >-
          --health-cmd "curl --fail http://localhost:4444/wd/hub/status || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # --- NEW SERVICE DEFINITION FOR YOUR NODE.JS APP ---
      # This makes your Node.js server accessible at http://testserver:3000 within the job's network
      appserver:
        image: node:20-alpine # Using a lightweight Node.js image
        working-directory: ${{ github.workspace }} # Set working directory to the root of the checked-out code
        ports:
          - 3000:3000 # Map port 3000 inside the container
        command: ["node", "src/server.js"] # Command to start your server
        # This healthcheck ensures the Node.js server is ready before the test runs
        options: >-
          --health-cmd "curl --fail http://localhost:3000 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      # --- END OF NEW SERVICE DEFINITION ---

    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: www-build

    - name: Extract artifact files
      run: tar -xzf www-build.tar.gz

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      run: npm test

    # Removed the manual start and wait for Node.js server
    # The 'appserver' service handles this automatically with its healthcheck

    - name: Run Selenium integration tests
      # The Server URL is now correctly http://testserver:3000 thanks to the 'appserver' service
      run: node tests/SeleniumTest.mjs github

    # The 'stop-containers' step is not explicitly needed here
    # as GitHub Actions automatically tears down services after the job.